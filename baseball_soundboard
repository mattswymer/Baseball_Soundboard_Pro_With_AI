<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Little League Soundboard</title>
    <!-- Tailwind CSS for modern, responsive styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Phosphor Icons for a clean, modern look -->
    <script src="https://unpkg.com/@phosphor-icons/web"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Custom scrollbar for better aesthetics */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-thumb {
            background-color: #cbd5e1;
            border-radius: 4px;
        }
        ::-webkit-scrollbar-track {
            background-color: #f1f5f9;
        }

        .soundboard-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }
        @media (min-width: 768px) {
            .soundboard-grid {
                grid-template-columns: 1fr 1fr;
            }
        }
        .progress-bar-container {
            height: 8px;
            background-color: #e2e8f0;
            border-radius: 4px;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }
        .progress-bar {
            height: 100%;
            width: 0;
            transition: width 0.1s linear;
        }
        .time-display {
            font-size: 0.75rem;
            color: #4b5563;
        }
        .playing-background {
            background-color: #e5e7eb; /* light-gray-200 */
        }
    </style>
</head>
<body class="bg-gray-100 flex flex-col items-center p-4 min-h-screen">

    <!-- Main Container -->
    <div class="container max-w-7xl mx-auto bg-white p-6 md:p-10 rounded-2xl shadow-xl space-y-8">
        <header class="text-center">
            <h1 class="text-4xl md:text-5xl font-bold text-gray-800 mb-2">Little League Soundboard</h1>
            <p class="text-gray-500 text-lg">Walkout songs and announcer calls for the big game!</p>
        </header>

        <!-- Announcer Section (Speech-to-Text) -->
        <div class="bg-gray-50 p-6 rounded-xl shadow-inner border border-gray-200">
            <h2 class="text-2xl font-semibold text-gray-700 mb-4 flex items-center gap-2">
                <i class="ph ph-microphone-stage text-purple-500"></i>
                Announcer
            </h2>
            <div class="flex flex-col md:flex-row items-center gap-4">
                <div class="flex-grow flex flex-col gap-2 w-full">
                    <input type="text" id="announcer-text" placeholder="Enter text or use your voice..."
                        class="flex-grow p-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-purple-400 focus:border-purple-400 transition-colors">
                    <select id="voice-select" class="p-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-purple-400 focus:border-purple-400 transition-colors w-full">
                        <option value="">Select an Announcer Voice</option>
                    </select>
                </div>
                <div class="flex gap-2 w-full md:w-auto">
                    <button id="start-announcer" class="flex-1 md:flex-none bg-purple-500 hover:bg-purple-600 text-white font-bold py-3 px-6 rounded-lg transition-colors shadow-md flex items-center justify-center gap-2">
                        <i class="ph ph-speaker-high text-xl"></i> Announce
                    </button>
                    <button id="start-speech" class="flex-1 md:flex-none bg-purple-500 hover:bg-purple-600 text-white font-bold py-3 px-6 rounded-lg transition-colors shadow-md flex items-center justify-center gap-2">
                        <i class="ph ph-microphone text-xl"></i>
                    </button>
                </div>
            </div>
            <div id="speech-status" class="mt-2 text-sm text-gray-600 hidden">Listening...</div>
        </div>

        <!-- Fade All Button -->
        <div class="flex justify-center">
            <button id="fade-all" class="bg-red-500 hover:bg-red-600 text-white font-bold py-4 px-8 rounded-full transition-colors shadow-lg flex items-center gap-2 text-lg">
                <i class="ph ph-speaker-slash text-2xl"></i> Fade All
            </button>
        </div>

        <!-- Soundboard Grid -->
        <div class="soundboard-grid" id="soundboard">

            <!-- Announcements Column -->
            <div class="bg-gray-50 p-6 rounded-xl shadow-inner border border-gray-200">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-2xl font-semibold text-gray-700 flex items-center gap-2">
                        <i class="ph ph-megaphone text-blue-500"></i>
                        Announcements
                    </h2>
                    <button id="add-announcement" class="bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded-lg text-sm transition-colors shadow-sm">Add New</button>
                </div>
                <div id="announcement-column" class="space-y-4 min-h-[200px]">
                    <!-- Placeholder buttons for Announcements -->
                    <div data-url="https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3" data-name="Next to the Plate..." class="draggable-container w-full bg-white rounded-xl shadow-md hover:shadow-lg transition-shadow duration-200 cursor-grab active:cursor-grabbing border border-blue-200" draggable="true">
                        <div class="flex items-center p-4">
                            <button class="play-pause-btn flex-shrink-0 text-blue-500 hover:text-blue-700 transition-colors mr-4">
                                <i class="ph ph-play-circle text-3xl"></i>
                            </button>
                            <span class="text-gray-800 font-medium truncate flex-grow">Next to the Plate...</span>
                            <div class="flex items-center gap-2 ml-auto">
                                <i class="ph ph-pencil-simple text-gray-400 hover:text-gray-600 transition-colors cursor-pointer edit-btn"></i>
                                <i class="ph ph-trash text-red-500 hover:text-red-700 transition-colors cursor-pointer delete-btn"></i>
                            </div>
                        </div>
                        <div class="flex items-center gap-2 mx-4 mb-4">
                            <span class="current-time time-display">0:00</span>
                            <div class="progress-bar-container flex-grow">
                                <div class="progress-bar bg-blue-500"></div>
                            </div>
                            <span class="total-time time-display">0:00</span>
                        </div>
                    </div>
                    <div data-url="https://www.soundhelix.com/examples/mp3/SoundHelix-Song-2.mp3" data-name="And Now Batting..." class="draggable-container w-full bg-white rounded-xl shadow-md hover:shadow-lg transition-shadow duration-200 cursor-grab active:cursor-grabbing border border-blue-200" draggable="true">
                        <div class="flex items-center p-4">
                            <button class="play-pause-btn flex-shrink-0 text-blue-500 hover:text-blue-700 transition-colors mr-4">
                                <i class="ph ph-play-circle text-3xl"></i>
                            </button>
                            <span class="text-gray-800 font-medium truncate flex-grow">And Now Batting...</span>
                            <div class="flex items-center gap-2 ml-auto">
                                <i class="ph ph-pencil-simple text-gray-400 hover:text-gray-600 transition-colors cursor-pointer edit-btn"></i>
                                <i class="ph ph-trash text-red-500 hover:text-red-700 transition-colors cursor-pointer delete-btn"></i>
                            </div>
                        </div>
                        <div class="flex items-center gap-2 mx-4 mb-4">
                            <span class="current-time time-display">0:00</span>
                            <div class="progress-bar-container flex-grow">
                                <div class="progress-bar bg-blue-500"></div>
                            </div>
                            <span class="total-time time-display">0:00</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Songs Column -->
            <div class="bg-gray-50 p-6 rounded-xl shadow-inner border border-gray-200">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-2xl font-semibold text-gray-700 flex items-center gap-2">
                        <i class="ph ph-music-notes-simple text-green-500"></i>
                        Songs
                    </h2>
                    <button id="add-song" class="bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded-lg text-sm transition-colors shadow-sm">Add New</button>
                </div>
                <div id="song-column" class="space-y-4 min-h-[200px]">
                    <!-- Placeholder buttons for Songs -->
                    <div data-url="https://www.soundhelix.com/examples/mp3/SoundHelix-Song-3.mp3" data-name="Walk-up Song #1" class="draggable-container w-full bg-white rounded-xl shadow-md hover:shadow-lg transition-shadow duration-200 cursor-grab active:cursor-grabbing border border-green-200" draggable="true">
                        <div class="flex items-center p-4">
                            <button class="play-pause-btn flex-shrink-0 text-green-500 hover:text-green-700 transition-colors mr-4">
                                <i class="ph ph-play-circle text-3xl"></i>
                            </button>
                            <span class="text-gray-800 font-medium truncate flex-grow">Walk-up Song #1</span>
                            <div class="flex items-center gap-2 ml-auto">
                                <i class="ph ph-pencil-simple text-gray-400 hover:text-gray-600 transition-colors cursor-pointer edit-btn"></i>
                                <i class="ph ph-trash text-red-500 hover:text-red-700 transition-colors cursor-pointer delete-btn"></i>
                            </div>
                        </div>
                        <div class="flex items-center gap-2 mx-4 mb-4">
                            <span class="current-time time-display">0:00</span>
                            <div class="progress-bar-container flex-grow">
                                <div class="progress-bar bg-green-500"></div>
                            </div>
                            <span class="total-time time-display">0:00</span>
                        </div>
                    </div>
                    <div data-url="https://www.soundhelix.com/examples/mp3/SoundHelix-Song-4.mp3" data-name="Walk-up Song #2" class="draggable-container w-full bg-white rounded-xl shadow-md hover:shadow-lg transition-shadow duration-200 cursor-grab active:cursor-grabbing border border-green-200" draggable="true">
                        <div class="flex items-center p-4">
                            <button class="play-pause-btn flex-shrink-0 text-green-500 hover:text-green-700 transition-colors mr-4">
                                <i class="ph ph-play-circle text-3xl"></i>
                            </button>
                            <span class="text-gray-800 font-medium truncate flex-grow">Walk-up Song #2</span>
                            <div class="flex items-center gap-2 ml-auto">
                                <i class="ph ph-pencil-simple text-gray-400 hover:text-gray-600 transition-colors cursor-pointer edit-btn"></i>
                                <i class="ph ph-trash text-red-500 hover:text-red-700 transition-colors cursor-pointer delete-btn"></i>
                            </div>
                        </div>
                        <div class="flex items-center gap-2 mx-4 mb-4">
                            <span class="current-time time-display">0:00</span>
                            <div class="progress-bar-container flex-grow">
                                <div class="progress-bar bg-green-500"></div>
                            </div>
                            <span class="total-time time-display">0:00</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Modal (hidden by default) -->
    <div id="edit-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 hidden">
        <div class="bg-white p-6 rounded-xl shadow-2xl w-full max-w-md space-y-4">
            <h3 class="text-xl font-bold text-gray-800">Edit Sound Button</h3>
            <div>
                <label for="edit-name" class="block text-sm font-medium text-gray-700">Button Text</label>
                <input type="text" id="edit-name" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
            </div>
            <div>
                <label for="edit-url" class="block text-sm font-medium text-gray-700">Audio URL</label>
                <div class="mt-1 flex items-center gap-2">
                    <input type="text" id="edit-url" class="block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" placeholder="Paste URL here...">
                    <button id="choose-file-btn" class="flex-shrink-0 bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors text-sm">Choose File</button>
                    <input type="file" id="file-input" class="hidden" accept="audio/*">
                </div>
            </div>
            <div class="flex justify-end gap-2">
                <button id="cancel-edit" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors">Cancel</button>
                <button id="save-edit" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">Save</button>
            </div>
        </div>
    </div>

    <!-- Confirmation Modal (hidden by default) -->
    <div id="confirm-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 hidden">
        <div class="bg-white p-6 rounded-xl shadow-2xl w-full max-w-sm space-y-4 text-center">
            <h3 class="text-xl font-bold text-gray-800" id="confirm-message"></h3>
            <div class="flex justify-center gap-4">
                <button id="confirm-cancel" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors">Cancel</button>
                <button id="confirm-ok" class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors">Confirm</button>
            </div>
        </div>
    </div>

    <!-- Recording Status Toast -->
    <div id="recording-toast" class="fixed bottom-4 right-4 bg-red-500 text-white px-4 py-2 rounded-full shadow-lg hidden">
        <div class="flex items-center gap-2">
            <span class="relative flex h-3 w-3">
                <span class="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span>
                <span class="relative inline-flex rounded-full h-3 w-3 bg-red-600"></span>
            </span>
            <span>Recording... Click to stop.</span>
        </div>
    </div>

    <script>
        // Use a Map to keep track of all playing audio sources and their state
        const activeSources = new Map();
        const FADE_DURATION = 2.5; // Fade duration in seconds

        // Helper function to format time in mm:ss format
        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = Math.floor(seconds % 60);
            const formattedSeconds = remainingSeconds < 10 ? '0' + remainingSeconds : remainingSeconds;
            return `${minutes}:${formattedSeconds}`;
        }
        
        // Function to create a new button element
        function createButtonElement(name, url, isSong) {
            const container = document.createElement('div');
            container.className = `draggable-container w-full bg-white rounded-xl shadow-md hover:shadow-lg transition-shadow duration-200 cursor-grab active:cursor-grabbing border ${isSong ? 'border-green-200' : 'border-blue-200'}`;
            container.setAttribute('data-url', url);
            container.setAttribute('data-name', name);
            container.setAttribute('draggable', 'true');
            container.innerHTML = `
                <div class="flex items-center p-4">
                    <button class="play-pause-btn flex-shrink-0 text-${isSong ? 'green' : 'blue'}-500 hover:text-${isSong ? 'green' : 'blue'}-700 transition-colors mr-4">
                        <i class="ph ph-play-circle text-3xl"></i>
                    </button>
                    <span class="text-gray-800 font-medium truncate flex-grow">${name}</span>
                    <div class="flex items-center gap-2 ml-auto">
                        <i class="ph ph-pencil-simple text-gray-400 hover:text-gray-600 transition-colors cursor-pointer edit-btn"></i>
                        <i class="ph ph-trash text-red-500 hover:text-red-700 transition-colors cursor-pointer delete-btn"></i>
                    </div>
                </div>
                <div class="flex items-center gap-2 mx-4 mb-4">
                    <span class="current-time time-display">0:00</span>
                    <div class="progress-bar-container flex-grow">
                        <div class="progress-bar bg-${isSong ? 'green' : 'blue'}-500"></div>
                    </div>
                    <span class="total-time time-display">0:00</span>
                </div>
            `;
            return container;
        }

        // Wait for the window to load before starting the application logic
        window.onload = function() {
            // Get DOM elements
            const announcementColumn = document.getElementById('announcement-column');
            const songColumn = document.getElementById('song-column');
            const fadeAllButton = document.getElementById('fade-all');
            const addAnnouncementButton = document.getElementById('add-announcement');
            const addSongButton = document.getElementById('add-song');
            const editModal = document.getElementById('edit-modal');
            const editNameInput = document.getElementById('edit-name');
            const editUrlInput = document.getElementById('edit-url');
            const chooseFileBtn = document.getElementById('choose-file-btn');
            const fileInput = document.getElementById('file-input');
            const saveEditButton = document.getElementById('save-edit');
            const cancelEditButton = document.getElementById('cancel-edit');
            const announcerText = document.getElementById('announcer-text');
            const voiceSelect = document.getElementById('voice-select');
            const startAnnouncerButton = document.getElementById('start-announcer');
            const startSpeechButton = document.getElementById('start-speech');
            const speechStatus = document.getElementById('speech-status');
            const confirmModal = document.getElementById('confirm-modal');
            const confirmMessage = document.getElementById('confirm-message');
            const confirmOk = document.getElementById('confirm-ok');
            const confirmCancel = document.getElementById('confirm-cancel');
            const recordingToast = document.getElementById('recording-toast');

            // Web Audio API context
            let audioContext;

            // A cache for audio buffers to avoid re-fetching the same file
            const audioBufferCache = new Map();

            // Initialize the audio context on user interaction
            function initAudioContext() {
                if (!audioContext) {
                    audioContext = new (window.AudioContext || window.webkitAudioContext)();
                }
            }
            
            // Helper function to load an audio buffer
            async function loadAudioBuffer(url) {
                if (audioBufferCache.has(url)) {
                    return audioBufferCache.get(url);
                }
                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error(`Network response was not ok. Could not fetch audio from URL: ${url}`);
                }
                const arrayBuffer = await response.arrayBuffer();
                const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
                audioBufferCache.set(url, audioBuffer);
                return audioBuffer;
            }

            let currentlyEditingButton = null;

            // --- CONFIRMATION MODAL LOGIC (replaces `confirm()`) ---
            function showConfirmModal(message, onConfirm) {
                confirmMessage.textContent = message;
                confirmModal.classList.remove('hidden');

                const handleConfirm = () => {
                    onConfirm();
                    hideConfirmModal();
                };

                const hideConfirmModal = () => {
                    confirmModal.classList.add('hidden');
                    confirmOk.removeEventListener('click', handleConfirm);
                    confirmCancel.removeEventListener('click', hideConfirmModal);
                };

                confirmOk.addEventListener('click', handleConfirm);
                confirmCancel.addEventListener('click', hideConfirmModal);
            }

            // --- FADE ALL LOGIC ---
            fadeAllButton.addEventListener('click', () => {
                activeSources.forEach(({ source, gainNode, button }) => {
                    if (gainNode && source) {
                        gainNode.gain.cancelScheduledValues(audioContext.currentTime);
                        gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + FADE_DURATION);
                        setTimeout(() => {
                            source.stop();
                            source.disconnect();
                            // Reset visual state
                            button.classList.remove('playing-background');
                            const playPauseBtn = button.querySelector('.play-pause-btn');
                            playPauseBtn.querySelector('i').className = 'ph ph-play-circle text-3xl';
                            const isSong = button.closest('#song-column');
                            playPauseBtn.classList.remove('text-red-500', 'hover:text-red-700');
                            playPauseBtn.classList.add(isSong ? 'text-green-500' : 'text-blue-500', `hover:text-${isSong ? 'green' : 'blue'}-700`);
                            
                            cancelAnimationFrame(button.animationFrameId);
                            button.querySelector('.progress-bar').style.width = '0';
                            button.querySelector('.current-time').textContent = '0:00';
                        }, FADE_DURATION * 1000);
                    }
                });
                activeSources.clear();
            });

            // --- PLAY/PAUSE/SEEK LOGIC WITH FADE ---
            document.addEventListener('click', async (e) => {
                const buttonContainer = e.target.closest('.draggable-container');
                if (!buttonContainer) return;

                const playPauseBtn = e.target.closest('.play-pause-btn');
                const progressBarContainer = e.target.closest('.progress-bar-container');
                const isAnnouncement = buttonContainer.closest('#announcement-column');
                const playPauseBtnElement = buttonContainer.querySelector('.play-pause-btn');
                const playPauseIcon = playPauseBtnElement.querySelector('i');
                const progressBar = buttonContainer.querySelector('.progress-bar');
                const currentTimeSpan = buttonContainer.querySelector('.current-time');
                const totalTimeSpan = buttonContainer.querySelector('.total-time');

                const playBtnColor = isAnnouncement ? 'blue' : 'green';

                if (playPauseBtn) {
                    if (e.target.closest('.edit-btn') || e.target.closest('.delete-btn')) return;
                    initAudioContext();
                    const audioUrl = buttonContainer.getAttribute('data-url');
                    if (!audioUrl) {
                        console.error('No audio URL specified for this button.');
                        return;
                    }
                    
                    const state = activeSources.get(buttonContainer) || {};

                    if (state.source) {
                        // Pause
                        state.gainNode.gain.cancelScheduledValues(audioContext.currentTime);
                        state.gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + FADE_DURATION);
                        
                        const currentPlaybackTime = audioContext.currentTime - state.startTime + state.playbackOffset;
                        activeSources.set(buttonContainer, {
                            source: null,
                            gainNode: state.gainNode,
                            buffer: state.buffer,
                            startTime: null,
                            playbackOffset: currentPlaybackTime,
                            button: buttonContainer,
                        });
                        
                        setTimeout(() => {
                            state.source.stop();
                            state.source.disconnect();
                        }, FADE_DURATION * 1000);
                        buttonContainer.classList.remove('playing-background');
                        playPauseIcon.className = 'ph ph-play-circle text-3xl';
                        playPauseBtnElement.classList.remove('text-red-500', 'hover:text-red-700');
                        playPauseBtnElement.classList.add(`text-${playBtnColor}-500`, `hover:text-${playBtnColor}-700`);
                        cancelAnimationFrame(buttonContainer.animationFrameId);
                    } else {
                        // Play
                        let buffer;
                        try {
                            buffer = await loadAudioBuffer(audioUrl);
                        } catch (error) {
                            console.error('Error loading audio:', error);
                            return;
                        }
                        if (!state.buffer) {
                            totalTimeSpan.textContent = formatTime(buffer.duration);
                        }
                        const source = audioContext.createBufferSource();
                        source.buffer = buffer;
                        const gainNode = state.gainNode || audioContext.createGain();
                        source.connect(gainNode);
                        gainNode.connect(audioContext.destination);
                        gainNode.gain.cancelScheduledValues(audioContext.currentTime);
                        gainNode.gain.setValueAtTime(0.001, audioContext.currentTime);
                        gainNode.gain.exponentialRampToValueAtTime(1, audioContext.currentTime + FADE_DURATION);
                        const playbackOffset = state.playbackOffset || 0;
                        source.start(0, playbackOffset % buffer.duration);
                        activeSources.set(buttonContainer, {
                            source,
                            gainNode,
                            buffer,
                            startTime: audioContext.currentTime,
                            playbackOffset,
                            button: buttonContainer,
                        });
                        buttonContainer.classList.add('playing-background');
                        playPauseIcon.className = 'ph ph-pause-circle text-3xl';
                        playPauseBtnElement.classList.remove(`text-${playBtnColor}-500`, `hover:text-${playBtnColor}-700`);
                        playPauseBtnElement.classList.add('text-red-500', 'hover:text-red-700');
                        
                        function updateProgress() {
                            const currentState = activeSources.get(buttonContainer);
                            if (currentState && currentState.source) {
                                const elapsed = (audioContext.currentTime - currentState.startTime + currentState.playbackOffset);
                                const percentage = (elapsed / currentState.buffer.duration) * 100;
                                progressBar.style.width = `${percentage}%`;
                                currentTimeSpan.textContent = formatTime(elapsed);
                                buttonContainer.animationFrameId = requestAnimationFrame(updateProgress);
                            }
                        }
                        updateProgress();
                        source.onended = () => {
                            if (activeSources.has(buttonContainer)) {
                                activeSources.delete(buttonContainer);
                                buttonContainer.classList.remove('playing-background');
                                playPauseIcon.className = 'ph ph-play-circle text-3xl';
                                playPauseBtnElement.classList.remove('text-red-500', 'hover:text-red-700');
                                playPauseBtnElement.classList.add(`text-${playBtnColor}-500`, `hover:text-${playBtnColor}-700`);
                                progressBar.style.width = '0';
                                currentTimeSpan.textContent = '0:00';
                                cancelAnimationFrame(buttonContainer.animationFrameId);
                            }
                        };
                    }
                } else if (progressBarContainer) {
                    initAudioContext();
                    const state = activeSources.get(buttonContainer) || {};
                    if (!state.buffer) { return; }
                    const rect = progressBarContainer.getBoundingClientRect();
                    const clickX = e.clientX - rect.left;
                    const percentage = (clickX / rect.width);
                    const seekTime = percentage * state.buffer.duration;
                    if (state.source) {
                        state.source.stop();
                        state.source.disconnect();
                    }
                    const newSource = audioContext.createBufferSource();
                    newSource.buffer = state.buffer;
                    const newGainNode = state.gainNode || audioContext.createGain();
                    newGainNode.gain.cancelScheduledValues(audioContext.currentTime);
                    newGainNode.gain.setValueAtTime(1, audioContext.currentTime);
                    newSource.connect(newGainNode);
                    newGainNode.connect(audioContext.destination);
                    newSource.start(0, seekTime);
                    activeSources.set(buttonContainer, {
                        ...state,
                        source: newSource,
                        gainNode: newGainNode,
                        startTime: audioContext.currentTime,
                        playbackOffset: seekTime,
                        button: buttonContainer,
                    });
                    const progressBar = buttonContainer.querySelector('.progress-bar');
                    const currentTimeSpan = buttonContainer.querySelector('.current-time');
                    function updateProgress() {
                        const newState = activeSources.get(buttonContainer);
                        if (newState && newState.source) {
                            const elapsed = (audioContext.currentTime - newState.startTime + newState.playbackOffset);
                            const newPercentage = (elapsed / newState.buffer.duration) * 100;
                            progressBar.style.width = `${newPercentage}%`;
                            currentTimeSpan.textContent = formatTime(elapsed);
                            buttonContainer.animationFrameId = requestAnimationFrame(updateProgress);
                        }
                    }
                    updateProgress();
                    newSource.onended = () => {
                        if (activeSources.has(buttonContainer)) {
                            activeSources.delete(buttonContainer);
                            buttonContainer.classList.remove('playing-background');
                            const playPauseBtn = buttonContainer.querySelector('.play-pause-btn');
                            playPauseBtn.querySelector('i').className = 'ph ph-play-circle text-3xl';
                            playPauseBtn.classList.remove('text-red-500', 'hover:text-red-700');
                            playPauseBtn.classList.add(isAnnouncement ? 'text-blue-500' : 'text-green-500', `hover:text-${isAnnouncement ? 'blue' : 'green'}-700`);
                            progressBar.style.width = '0';
                            currentTimeSpan.textContent = '0:00';
                            cancelAnimationFrame(buttonContainer.animationFrameId);
                        }
                    };
                }
            });


            // --- EDIT/DELETE LOGIC ---
            document.addEventListener('click', (e) => {
                const editButton = e.target.closest('.edit-btn');
                const deleteButton = e.target.closest('.delete-btn');

                if (editButton) {
                    const buttonToEdit = editButton.closest('.draggable-container');
                    currentlyEditingButton = buttonToEdit;
                    editNameInput.value = buttonToEdit.getAttribute('data-name');
                    editUrlInput.value = buttonToEdit.getAttribute('data-url');
                    editModal.classList.remove('hidden');
                } else if (deleteButton) {
                    const buttonToDelete = deleteButton.closest('.draggable-container');
                    showConfirmModal('Are you sure you want to delete this button?', () => {
                        buttonToDelete.remove();
                    });
                }
            });

            saveEditButton.addEventListener('click', () => {
                if (currentlyEditingButton) {
                    const newName = editNameInput.value || 'Untitled';
                    const newUrl = editUrlInput.value || '';
                    currentlyEditingButton.setAttribute('data-name', newName);
                    currentlyEditingButton.setAttribute('data-url', newUrl);
                    currentlyEditingButton.querySelector('span').textContent = newName;
                    editModal.classList.add('hidden');
                    currentlyEditingButton = null;
                }
            });

            cancelEditButton.addEventListener('click', () => {
                editModal.classList.add('hidden');
                currentlyEditingButton = null;
                // Reset the file input value to prevent stale data
                fileInput.value = null;
            });

            // --- LOCAL FILE UPLOAD LOGIC ---
            chooseFileBtn.addEventListener('click', () => {
                fileInput.click();
            });

            fileInput.addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (event) => {
                        editUrlInput.value = event.target.result; // Set the URL input to the data URL
                    };
                    reader.readAsDataURL(file);
                }
            });

            // --- ADD BUTTONS LOGIC ---
            addAnnouncementButton.addEventListener('click', () => {
                const newButton = createButtonElement('New Announcement', 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-5.mp3', false);
                announcementColumn.appendChild(newButton);
            });
            addSongButton.addEventListener('click', () => {
                const newButton = createButtonElement('New Song', 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-6.mp3', true);
                songColumn.appendChild(newButton);
            });

            // --- DRAG AND DROP LOGIC (REVISED) ---
            let draggedItem = null;

            document.addEventListener('dragstart', (e) => {
                const item = e.target.closest('.draggable-container');
                if (item) {
                    draggedItem = item;
                    e.dataTransfer.effectAllowed = 'move';
                    e.dataTransfer.setData('text/plain', 'dragged-item');
                    item.style.opacity = '0.5';
                }
            });

            document.addEventListener('dragend', (e) => {
                if (draggedItem) {
                    draggedItem.style.opacity = '';
                    draggedItem = null;
                }
            });

            document.addEventListener('dragover', (e) => {
                e.preventDefault();
                const dropzone = e.target.closest('#announcement-column, #song-column');
                if (dropzone) {
                    const target = e.target.closest('.draggable-container');
                    if (target && target !== draggedItem) {
                        target.style.borderTop = (e.clientY < (target.getBoundingClientRect().top + target.offsetHeight / 2)) ? '2px solid #3498db' : '';
                        target.style.borderBottom = (e.clientY >= (target.getBoundingClientRect().top + target.offsetHeight / 2)) ? '2px solid #3498db' : '';
                    } else {
                        Array.from(dropzone.children).forEach(child => {
                            child.style.borderTop = '';
                            child.style.borderBottom = '';
                        });
                    }
                }
            });

            document.addEventListener('dragleave', (e) => {
                const dropzone = e.target.closest('#announcement-column, #song-column');
                if (dropzone) {
                    Array.from(dropzone.children).forEach(child => {
                        child.style.borderTop = '';
                        child.style.borderBottom = '';
                    });
                }
            });

            document.addEventListener('drop', (e) => {
                e.preventDefault();
                const dropzone = e.target.closest('#announcement-column, #song-column');
                const target = e.target.closest('.draggable-container');
                if (draggedItem && dropzone) {
                    Array.from(dropzone.children).forEach(child => {
                        child.style.borderTop = '';
                        child.style.borderBottom = '';
                    });
                    
                    if (target && target !== draggedItem) {
                        const parent = dropzone;
                        const nextSibling = (target.getBoundingClientRect().top + target.offsetHeight / 2) > e.clientY ? target : target.nextElementSibling;
                        parent.insertBefore(draggedItem, nextSibling);
                    } else {
                        dropzone.appendChild(draggedItem);
                    }
                }
            });
        };
    </script>
</body>
</html>
